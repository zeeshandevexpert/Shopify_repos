{%- comment %}
    Author: BSS B2B Login

    DO NOT MODIFY. The contents of BSS B2B Login 
    will overwrite any changes in the next update.

    Updated at: Thu Nov 14 2024
{% endcomment -%}
<script>
    const variantSelects = document.querySelector('variant-selects');
    const listVariantRestrict = {{ list_variant_restrict | json}}
    if (variantSelects && listVariantRestrict.length) {
    const updateVariantStatuses = () => {
        setTimeout(() => {
                const listVariant = {{product.variants | json}}
                const selectedOptionOneVariants =  listVariant.filter(
                (variant) => variantSelects.querySelector(':checked').value === variant.option1 && !listVariantRestrict.includes(`${variant.id}`)
                );
                const inputWrappers = [...variantSelects.querySelectorAll('.product-form__input')];
                if (inputWrappers && inputWrappers.length == 1) {
                    const availableOptionInputsValue = listVariant
                    .filter(variant => listVariantRestrict.includes(`${variant.id}`))
                    .map(variant => variant.option1);
                    inputWrappers.forEach((item) => {
                      const optionInputs = [...item.querySelectorAll('input[type="radio"], option')];
                      optionInputs.forEach((input) => {
                        if (availableOptionInputsValue.includes(input.getAttribute('value'))) {
                           input.innerText = '[value] - Unavailable'.replace('[value]', input.getAttribute('value'));
                        }
                      })
                    })
                }
                inputWrappers.forEach((option, index) => {
                if (index === 0) return;
                const optionInputs = [...option.querySelectorAll('input[type="radio"], option')];
                const previousOptionSelected = inputWrappers[index - 1].querySelector(':checked').value;
                const availableOptionInputsValue = selectedOptionOneVariants
                .filter((variant) => variant.available && variant[`option${index}`] === previousOptionSelected)
                .map((variantOption) => variantOption[`option${index + 1}`]);
                optionInputs.forEach((input) => {
                if (availableOptionInputsValue.includes(input.getAttribute('value'))) {
                    input.innerText = input.getAttribute('value');
                    } else {
                    input.innerText = '[value] - Unavailable'.replace('[value]', input.getAttribute('value'));
                    }
                });
            });
            })
    }
    updateVariantStatuses()
    variantSelects.addEventListener('change', () =>{
        updateVariantStatuses()
    })
    }

    const variantRadios = document.querySelector('variant-radios');
      if (variantRadios && listVariantRestrict.length) {
        const updateVariantStatuses = () => {
            setTimeout(() => {
                    const listVariant = {{product.variants | json}}
                    const selectedOptionOneVariants =  listVariant.filter(
                    (variant) => variantRadios.querySelector(':checked').value === variant.option1 && !listVariantRestrict.includes(`${variant.id}`)
                    );
                    const inputWrappers = [...variantRadios.querySelectorAll('.product-form__input')];
                    if (inputWrappers && inputWrappers.length == 1) {
                        const availableOptionInputsValue = listVariant
                        .filter(variant => listVariantRestrict.includes(`${variant.id}`))
                        .map(variant => variant.option1);
                        inputWrappers.forEach((item) => {
                        const optionInputs = [...item.querySelectorAll('input[type="radio"], option')];
                        optionInputs.forEach((input) => {
                            if (availableOptionInputsValue.includes(input.getAttribute('value'))) {
                                input.classList.add('disabled');
                            }
                        })
                        })
                    }
                    inputWrappers.forEach((option, index) => {
                    if (index === 0) return;
                    const optionInputs = [...option.querySelectorAll('input[type="radio"], option')];
                    const previousOptionSelected = inputWrappers[index - 1].querySelector(':checked').value;
                    const availableOptionInputsValue = selectedOptionOneVariants
                    .filter((variant) => variant.available && variant[`option${index}`] === previousOptionSelected)
                    .map((variantOption) => variantOption[`option${index + 1}`]);
                    optionInputs.forEach((input) => {
                    if (availableOptionInputsValue.includes(input.getAttribute('value'))) {
                         input.classList.remove('disabled');
                        } else {
                        input.classList.add('disabled');
                        }
                    });
                });
                })
        }
        updateVariantStatuses()
        variantRadios.addEventListener('change', () =>{
           updateVariantStatuses()
        })
      }
    
</script>
